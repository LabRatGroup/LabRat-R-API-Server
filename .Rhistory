toJSON(data.model$results),
data.query$token,
data.query$ml_model_state_id,
toJSON(data.params),
data.confusionMatrix$overall['Kappa'][[1]],
data.confusionMatrix$overall['Accuracy'][[1]],
toJSON(as.data.frame(data.confusionMatrix$table)),
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),1]), data.stats[1,1], data.stats[paste0('Class: ',dfParams$positive),1]),
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),2]), data.stats[1,1], data.stats[paste0('Class: ',dfParams$positive),1]),
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),5]), data.stats[1,1], data.stats[paste0('Class: ',dfParams$positive),1]),
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),6]), data.stats[1,1], data.stats[paste0('Class: ',dfParams$positive),1]),
Sys.time(),
Sys.time())
insertSql <- paste0(insertSql_1, insertSql_2, insertSql_3, seq="")
dbExecute(connection, insertSql)
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),1]), data.stats[1,1], data.stats[paste0('Class: ',dfParams$positive),1])
filename <- file.path(sprintf("%s/models",dir),sprintf("%s.rda", token))
saveRDS(data.model, file=filename)
data.stats <- as.data.frame(data.confusionMatrix$byClass)
insertSql_1 <- "INSERT INTO `ml_model_state_scores` "
insertSql_2 <- "(`results`, `token`, `ml_model_state_id`, `params`, `kappa`, `accuracy`, `confusion_matrix`, `sensitivity`, `specificity`, `precision`, `recall`, `created_at`, `updated_at`, `deleted_at`) values "
insertSql_3 <- sprintf("('%s','%s',%s,'%s',%s ,%s ,'%s', %s, %s, %s, %s,'%s','%s',NULL)",
toJSON(data.model$results),
data.query$token,
data.query$ml_model_state_id,
toJSON(data.params),
data.confusionMatrix$overall['Kappa'][[1]],
data.confusionMatrix$overall['Accuracy'][[1]],
toJSON(as.data.frame(data.confusionMatrix$table)),
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),1]), data.stats[1,1], data.stats[paste0('Class: ',dfParams$positive),1]),
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),2]), data.stats[1,1], data.stats[paste0('Class: ',dfParams$positive),1]),
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),5]), data.stats[1,1], data.stats[paste0('Class: ',dfParams$positive),1]),
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),6]), data.stats[1,1], data.stats[paste0('Class: ',dfParams$positive),1]),
Sys.time(),
Sys.time())
insertSql <- paste0(insertSql_1, insertSql_2, insertSql_3, seq="")
dbExecute(connection, insertSql)
insertSql
data.stats
data.stats
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),1]), data.stats[1,1], data.stats[paste0('Class: ',dfParams$positive),1])
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),2]), data.stats[1,2], data.stats[paste0('Class: ',dfParams$positive),1])
data.stats[1,2]
data.stats[1,1]
data.stats[2,1]
# Get MySQL connection param from env variables
data.env <-read.csv('env', header=TRUE, sep = ",", dec = ",")
connection <- dbConnect(
MySQL(),
user=toString(data.env$dbUser),
password=toString(data.env$dbpassword),
host=toString(data.env$dbHost),
dbname=toString(data.env$dbName)
)
# Catch collection token from script params
args <- commandArgs(trailingOnly = TRUE)
#token <- args[1]
token <- "jHudkfI96dLCu5nWpgqozx3IL"
# Querying data from MySQL
data.query <- dbGetQuery(connection, sprintf("SELECT token, params, file_path, cast(ml_model_state_id as CHAR(25)) as ml_model_state_id FROM ml_model_state_training_datas WHERE token = '%s'", token))
# Retrieving data for model analysis
data.params <- fromJSON(data.query$params)
dir <- paste(data.env$dataDir,"/",data.env$sftpUser, sep="")
data.raw <- read.csv(file.path(dir, data.query$file_path), header=TRUE, sep = ";", dec = ",")
#Create model
set.seed(123)
data.in_train <- createDataPartition(data.raw$prediction, p = 0.67, list = FALSE)
data.training <- data.raw[data.in_train, ]
data.test <- data.raw[-data.in_train, ]
dfParams <- as.data.frame(fromJSON(data.query$params))
data.training.model <- list()
data.training.prediction <- list()
data.training.confusionMatrix <- list()
max = 0
for (row in 1:nrow(dfParams)) {
method <- dfParams[row, "method"]
metric <- dfParams[row, "metric"]
preprocessing <- dfParams[row, "preprocessing"]
positive <- dfParams[row, "positive"]
trainControlMethod <- dfParams[row, "control"]$trainControlMethod
trainControlMethodRounds <- dfParams[row, "control"]$trainControlMethodRounds
ctrl <- trainControl(
method = trainControlMethod,
number = as.numeric(trainControlMethodRounds)
)
source(file.path("./scripts/grid/", sprintf("%s.R", method)))
data.training.model[[method]] <- train(
prediction ~ .,
data = data.training,
method = method,
preProcess = c(preprocessing),
trControl = ctrl,
tuneGrid = grid,
metric = metric
)
data.training.prediction[[method]] <- predict(data.training.model[[method]], data.test)
data.training.confusionMatrix[[method]] <- confusionMatrix(data.training.prediction[[method]],  data.test$prediction, positive = positive)
metricValue <- data.training.confusionMatrix[[method]]$overall[[metric]]
if(metricValue >= max) {
max <- metricValue
data.model <- data.training.model[[method]]
data.prediction <- data.training.prediction[[method]]
data.confusionMatrix <- data.training.confusionMatrix[[method]]
data.params <- dfParams[row,]
}
}
data.params
filename <- file.path(sprintf("%s/models",dir),sprintf("%s.rda", token))
saveRDS(data.model, file=filename)
data.stats <- as.data.frame(data.confusionMatrix$byClass)
insertSql_1 <- "INSERT INTO `ml_model_state_scores` "
insertSql_2 <- "(`results`, `token`, `ml_model_state_id`, `params`, `kappa`, `accuracy`, `confusion_matrix`, `sensitivity`, `specificity`, `precision`, `recall`, `created_at`, `updated_at`, `deleted_at`) values "
insertSql_3 <- sprintf("('%s','%s',%s,'%s',%s ,%s ,'%s', %s, %s, %s, %s,'%s','%s',NULL)",
toJSON(data.model$results),
data.query$token,
data.query$ml_model_state_id,
toJSON(data.params),
data.confusionMatrix$overall['Kappa'][[1]],
data.confusionMatrix$overall['Accuracy'][[1]],
toJSON(as.data.frame(data.confusionMatrix$table)),
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),1]), data.stats[1,1], data.stats[paste0('Class: ',dfParams$positive),1]),
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),2]), data.stats[2,1], data.stats[paste0('Class: ',dfParams$positive),1]),
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),5]), data.stats[5,1], data.stats[paste0('Class: ',dfParams$positive),1]),
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),6]), data.stats[6,1], data.stats[paste0('Class: ',dfParams$positive),1]),
Sys.time(),
Sys.time())
insertSql <- paste0(insertSql_1, insertSql_2, insertSql_3, seq="")
dbExecute(connection, insertSql)
insertSql
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),1]), data.stats[1,1], data.stats[paste0('Class: ',dfParams$positive),1])
ifelse(is.na(data.stats[paste0('Class: ',dfParams$positive),2]), data.stats[2,1], data.stats[paste0('Class: ',dfParams$positive),1])
data.stats[paste0('Class: ',dfParams$positive),1]
data.stats[paste0('Class: ',dfParams$positive),2]
data.class()
data.model
data.model$modelInfo
data.model$modelInfo$predictors()
data.model$modelInfo$label
data.model$modelInfo$library
data.model$modelInfo$loop
data.model$modelInfo$type
data.model$modelInfo$parameters
data.model$modelInfo$tags
data.model$pred
data.model
data.model$call
data.model$modelType
data.model$results
data.model$dots
data.model$xlevels
data.model$yLimits
data.model$levels
data.model$levels[1]
data.model$levels[2]
data.model$levels[[]]
data.model$levels[[1]]
data.model$levels.levels
data.model$levels
data.model$levels.size()
data.model$levels
data.class()
dataentry()
data.stats
data.stats$`data.confusionMatrix$byClass`
data.stats
data
data.env
data.model
View(data.model)
data.model$levels
data.confusionMatrix
data.confusionMatrix$positive
data.confusionMatrix$overall
data.confusionMatrix
data.confusionMatrix$table
data.confusionMatrix$table
dim(data.confusionMatrix$table)
dim(data.confusionMatrix$table)[1]
dim(data.confusionMatrix$table)[1]
dim(data.confusionMatrix$table)[1]*dim(data.confusionMatrix$table)[2]
filename <- file.path(sprintf("%s/models",dir),sprintf("%s.rda", token))
saveRDS(data.model, file=filename)
data.stats <- as.data.frame(data.confusionMatrix$byClass)
if(dim(data.confusionMatrix$table)[1]*dim(data.confusionMatrix$table)[2] == 4){
sensitivity <- data.stats[1,1]
specificity <- data.stats[2,1]
precision <- data.stats[5,1]
recall <- data.stats[6,1]
} else{
sensitivity <- data.stats[paste0('Class: ',dfParams$positive),1]
specificity <- data.stats[paste0('Class: ',dfParams$positive),2]
precision <- data.stats[paste0('Class: ',dfParams$positive),5]
recall <- data.stats[paste0('Class: ',dfParams$positive),6]
}
insertSql_1 <- "INSERT INTO `ml_model_state_scores` "
insertSql_2 <- "(`results`, `token`, `ml_model_state_id`, `params`, `kappa`, `accuracy`, `confusion_matrix`, `sensitivity`, `specificity`, `precision`, `recall`, `created_at`, `updated_at`, `deleted_at`) values "
insertSql_3 <- sprintf("('%s','%s',%s,'%s',%s ,%s ,'%s', %s, %s, %s, %s,'%s','%s',NULL)",
toJSON(data.model$results),
data.query$token,
data.query$ml_model_state_id,
toJSON(data.params),
data.confusionMatrix$overall['Kappa'][[1]],
data.confusionMatrix$overall['Accuracy'][[1]],
toJSON(as.data.frame(data.confusionMatrix$table)),
sensitivity,
specificity,
precision,
recall,
Sys.time(),
Sys.time())
insertSql <- paste0(insertSql_1, insertSql_2, insertSql_3, seq="")
insertSql
lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
# Get MySQL connection param from env variables
data.env <-read.csv('env', header=TRUE, sep = ",", dec = ",")
connection <- dbConnect(
MySQL(),
user=toString(data.env$dbUser),
password=toString(data.env$dbpassword),
host=toString(data.env$dbHost),
dbname=toString(data.env$dbName)
)
# Catch collection token from script params
args <- commandArgs(trailingOnly = TRUE)
#token <- args[1]
token <- "liC53aCdwP9jxmzjCXXIrlGNL"
# Querying data from MySQL
data.query <- dbGetQuery(connection, sprintf("SELECT token, params, file_path, cast(ml_model_state_id as CHAR(25)) as ml_model_state_id FROM ml_model_state_training_datas WHERE token = '%s'", token))
# Retrieving data for model analysis
data.params <- fromJSON(data.query$params)
dir <- paste(data.env$dataDir,"/",data.env$sftpUser, sep="")
data.raw <- read.csv(file.path(dir, data.query$file_path), header=TRUE, sep = ";", dec = ",")
#Create model
set.seed(123)
data.in_train <- createDataPartition(data.raw$prediction, p = 0.67, list = FALSE)
data.training <- data.raw[data.in_train, ]
data.test <- data.raw[-data.in_train, ]
dfParams <- as.data.frame(fromJSON(data.query$params))
data.training.model <- list()
data.training.prediction <- list()
data.training.confusionMatrix <- list()
max = 0
for (row in 1:nrow(dfParams)) {
method <- dfParams[row, "method"]
metric <- dfParams[row, "metric"]
preprocessing <- dfParams[row, "preprocessing"]
positive <- dfParams[row, "positive"]
trainControlMethod <- dfParams[row, "control"]$trainControlMethod
trainControlMethodRounds <- dfParams[row, "control"]$trainControlMethodRounds
ctrl <- trainControl(
method = trainControlMethod,
number = as.numeric(trainControlMethodRounds)
)
source(file.path("./scripts/grid/", sprintf("%s.R", method)))
data.training.model[[method]] <- train(
prediction ~ .,
data = data.training,
method = method,
preProcess = c(preprocessing),
trControl = ctrl,
tuneGrid = grid,
metric = metric
)
data.training.prediction[[method]] <- predict(data.training.model[[method]], data.test)
data.training.confusionMatrix[[method]] <- confusionMatrix(data.training.prediction[[method]],  data.test$prediction, positive = positive)
metricValue <- data.training.confusionMatrix[[method]]$overall[[metric]]
if(metricValue >= max) {
max <- metricValue
data.model <- data.training.model[[method]]
data.prediction <- data.training.prediction[[method]]
data.confusionMatrix <- data.training.confusionMatrix[[method]]
data.params <- dfParams[row,]
}
}
data.params
filename <- file.path(sprintf("%s/models",dir),sprintf("%s.rda", token))
saveRDS(data.model, file=filename)
data.stats <- as.data.frame(data.confusionMatrix$byClass)
if(dim(data.confusionMatrix$table)[1]*dim(data.confusionMatrix$table)[2] == 4){
sensitivity <- data.stats[1,1]
specificity <- data.stats[2,1]
precision <- data.stats[5,1]
recall <- data.stats[6,1]
} else{
sensitivity <- data.stats[paste0('Class: ',dfParams$positive),1]
specificity <- data.stats[paste0('Class: ',dfParams$positive),2]
precision <- data.stats[paste0('Class: ',dfParams$positive),5]
recall <- data.stats[paste0('Class: ',dfParams$positive),6]
}
insertSql_1 <- "INSERT INTO `ml_model_state_scores` "
insertSql_2 <- "(`results`, `token`, `ml_model_state_id`, `params`, `kappa`, `accuracy`, `confusion_matrix`, `sensitivity`, `specificity`, `precision`, `recall`, `created_at`, `updated_at`, `deleted_at`) values "
insertSql_3 <- sprintf("('%s','%s',%s,'%s',%s ,%s ,'%s', %s, %s, %s, %s,'%s','%s',NULL)",
toJSON(data.model$results),
data.query$token,
data.query$ml_model_state_id,
toJSON(data.params),
data.confusionMatrix$overall['Kappa'][[1]],
data.confusionMatrix$overall['Accuracy'][[1]],
toJSON(as.data.frame(data.confusionMatrix$table)),
sensitivity,
specificity,
precision,
recall,
Sys.time(),
Sys.time())
insertSql <- paste0(insertSql_1, insertSql_2, insertSql_3, seq="")
dbExecute(connection, insertSql)
lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
# Get MySQL connection param from env variables
#print('############### Get MySQL connection param from env variables');
data.env <-read.csv('env', header=TRUE, sep = ",", dec = ",")
connection <- dbConnect(
MySQL(),
user=toString(data.env$dbUser),
password=toString(data.env$dbpassword),
host=toString(data.env$dbHost),
dbname=toString(data.env$dbName)
)
# Catch collection token from script params
args <- commandArgs(trailingOnly = TRUE)
#token <- args[1]
token <- "iTB4yX3dGEvDTIM3WTHCIuDn3"
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as id, token, file_path, cast(ml_model_prediction_id as CHAR(25)) as ml_model_prediction_id FROM ml_model_prediction_datas WHERE token = '%s'", token))
data.state <- dbGetQuery(connection, sprintf("SELECT token FROM ml_model_state_training_datas WHERE ml_model_state_id = '%s'", data.query$ml_model_prediction_id))
# Retrieving data for model analysis
dir <- paste(data.env$dataDir,"/",data.env$sftpUser, sep="")
data.raw <- read.csv(file.path(dir, data.query$file_path), header=TRUE, sep = ";", dec = ",")
filename <- file.path(sprintf("%s/models",dir),sprintf("%s.rda", data.state$token))
data.model <- readRDS(filename)
data.model <- readRDS(filename)
# Get MySQL connection param from env variables
#print('############### Get MySQL connection param from env variables');
data.env <-read.csv('env', header=TRUE, sep = ",", dec = ",")
connection <- dbConnect(
MySQL(),
user=toString(data.env$dbUser),
password=toString(data.env$dbpassword),
host=toString(data.env$dbHost),
dbname=toString(data.env$dbName)
)
# Catch collection token from script params
args <- commandArgs(trailingOnly = TRUE)
#token <- args[1]
token <- "JzOgFZXGGzQBIVBH3OyOZc98P"
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as id, token, file_path, cast(ml_model_prediction_id as CHAR(25)) as ml_model_prediction_id FROM ml_model_prediction_datas WHERE token = '%s'", token))
data.state <- dbGetQuery(connection, sprintf("SELECT token FROM ml_model_state_training_datas WHERE ml_model_state_id = '%s'", data.query$ml_model_prediction_id))
# Retrieving data for model analysis
dir <- paste(data.env$dataDir,"/",data.env$sftpUser, sep="")
data.raw <- read.csv(file.path(dir, data.query$file_path), header=TRUE, sep = ";", dec = ",")
filename <- file.path(sprintf("%s/models",dir),sprintf("%s.rda", data.state$token))
data.model <- readRDS(filename)
data.prediction <- predict(data.model, data.raw)
filename <- file.path(sprintf("%s/models",dir),sprintf("%s.rda", data.state$token))
View(data.query)
View(data.state)
data.state <- dbGetQuery(connection, sprintf("SELECT token FROM ml_model_state_training_datas WHERE ml_model_state_id = '%s'", data.query$ml_model_prediction_id))
View(data.state)
View(data.query)
# Get MySQL connection param from env variables
#print('############### Get MySQL connection param from env variables');
data.env <-read.csv('env', header=TRUE, sep = ",", dec = ",")
connection <- dbConnect(
MySQL(),
user=toString(data.env$dbUser),
password=toString(data.env$dbpassword),
host=toString(data.env$dbHost),
dbname=toString(data.env$dbName)
)
# Catch collection token from script params
args <- commandArgs(trailingOnly = TRUE)
#token <- args[1]
token <- "DksGpkSfD7uZeETw3igaZgGmb"
# Get MySQL connection param from env variables
#print('############### Get MySQL connection param from env variables');
data.env <-read.csv('env', header=TRUE, sep = ",", dec = ",")
connection <- dbConnect(
MySQL(),
user=toString(data.env$dbUser),
password=toString(data.env$dbpassword),
host=toString(data.env$dbHost),
dbname=toString(data.env$dbName)
)
# Catch collection token from script params
args <- commandArgs(trailingOnly = TRUE)
#token <- args[1]
token <- "DksGpkSfD7uZeETw3igaZgGmb"
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as id, ml_model_prediction_datas.token, file_path, cast(ml_model_prediction_id as CHAR(25)) as ml_model_prediction_id, ml_model_state_training_datas.token as training_token
FROM ml_model_prediction_datas LEFT JOIN ml_model_state_training_datas
ON  ml_model_state_training_datas.ml_model_state_id = ml_model_prediction_datas
WHERE ml_model_prediction_datas.token = '%s'", token))
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as ml_model_prediction_datas.id as id, ml_model_prediction_datas.token, file_path, cast(ml_model_prediction_id as CHAR(25)) as ml_model_prediction_id, ml_model_state_training_datas.token as training_token
FROM ml_model_prediction_datas LEFT JOIN ml_model_state_training_datas
ON  ml_model_state_training_datas.ml_model_state_id = ml_model_prediction_datas
WHERE ml_model_prediction_datas.token = '%s'", token
# Querying data from MySQL
#print('############### Querying data from MySQL');
# FIX RELATION QUERY
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as ml_model_prediction_datas.id as id, ml_model_prediction_datas.token, file_path, cast(ml_model_prediction_id as CHAR(25)) as ml_model_prediction_id, ml_model_state_training_datas.token as training_token
FROM ml_model_prediction_datas LEFT JOIN ml_model_state_training_datas
ON  ml_model_state_training_datas.ml_model_state_id = ml_model_prediction_datas
WHERE ml_model_prediction_datas.token = '%s'", token))
# Querying data from MySQL
#print('############### Querying data from MySQL');
# FIX RELATION QUERY
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as ml_model_prediction_datas.id as id, ml_model_prediction_datas.token, file_path, cast(ml_model_prediction_id as CHAR(25)) as ml_model_prediction_id, ml_model_state_training_datas.token as training_token
FROM ml_model_prediction_datas LEFT JOIN ml_model_state_training_datas ON  ml_model_state_training_datas.ml_model_state_id = ml_model_prediction_datas WHERE ml_model_prediction_datas.token = '%s'", token))
# Querying data from MySQL
#print('############### Querying data from MySQL');
# FIX RELATION QUERY
$sql <- sprintf("SELECT cast(id as CHAR(25)) as ml_model_prediction_datas.id as id, ml_model_prediction_datas.token, file_path, cast(ml_model_prediction_id as CHAR(25)) as ml_model_prediction_id, ml_model_state_training_datas.token as training_token
FROM ml_model_prediction_datas LEFT JOIN ml_model_state_training_datas ON  ml_model_state_training_datas.ml_model_state_id = ml_model_prediction_datas WHERE ml_model_prediction_datas.token = '%s'", token)
# Querying data from MySQL
#print('############### Querying data from MySQL');
# FIX RELATION QUERY
sql <- sprintf("SELECT cast(id as CHAR(25)) as ml_model_prediction_datas.id as id, ml_model_prediction_datas.token, file_path, cast(ml_model_prediction_id as CHAR(25)) as ml_model_prediction_id, ml_model_state_training_datas.token as training_token FROM ml_model_prediction_datas LEFT JOIN ml_model_state_training_datas ON  ml_model_state_training_datas.ml_model_state_id = ml_model_prediction_datas WHERE ml_model_prediction_datas.token = '%s'", token)
data.query <- dbGetQuery(connection, ssql)
data.query <- dbGetQuery(connection, sql)
sql
# Get MySQL connection param from env variables
#print('############### Get MySQL connection param from env variables');
data.env <-read.csv('env', header=TRUE, sep = ",", dec = ",")
connection <- dbConnect(
MySQL(),
user=toString(data.env$dbUser),
password=toString(data.env$dbpassword),
host=toString(data.env$dbHost),
dbname=toString(data.env$dbName)
)
# Catch collection token from script params
args <- commandArgs(trailingOnly = TRUE)
#token <- args[1]
token <- "sMzWU448sjRDIFVetSCZ22JAc"
data.query <- dbGetQuery(connection, sprintf("SELECT token, params, file_path, cast(ml_model_state_id as CHAR(25)) as ml_model_state_id FROM ml_model_states WHERE token = '%s'", token))
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as id, token, params, file_path, cast(ml_model_id as CHAR(25)) as ml_model_id FROM ml_model_states WHERE token = '%s'", token))
# Retrieving data for model analysis
data.params <- fromJSON(data.query$params)
dir <- paste(data.env$dataDir,"/",data.env$sftpUser, sep="")
data.raw <- read.csv(file.path(dir, data.query$file_path), header=TRUE, sep = ";", dec = ",")
set.seed(123)
data.in_train <- createDataPartition(data.raw$prediction, p = 0.67, list = FALSE)
data.training <- data.raw[data.in_train, ]
data.test <- data.raw[-data.in_train, ]
dfParams <- as.data.frame(fromJSON(data.query$params))
data.training.model <- list()
data.training.prediction <- list()
data.training.confusionMatrix <- list()
max = 0
for (row in 1:nrow(dfParams)) {
method <- dfParams[row, "method"]
metric <- dfParams[row, "metric"]
preprocessing <- dfParams[row, "preprocessing"]
positive <- dfParams[row, "positive"]
trainControlMethod <- dfParams[row, "control"]$trainControlMethod
trainControlMethodRounds <- dfParams[row, "control"]$trainControlMethodRounds
ctrl <- trainControl(
method = trainControlMethod,
number = as.numeric(trainControlMethodRounds)
)
source(file.path("./scripts/grid/", sprintf("%s.R", method)))
data.training.model[[method]] <- train(
prediction ~ .,
data = data.training,
method = method,
preProcess = c(preprocessing),
trControl = ctrl,
tuneGrid = grid,
metric = metric
)
data.training.prediction[[method]] <- predict(data.training.model[[method]], data.test)
data.training.confusionMatrix[[method]] <- confusionMatrix(data.training.prediction[[method]],  data.test$prediction, positive = positive)
metricValue <- data.training.confusionMatrix[[method]]$overall[[metric]]
if(metricValue >= max) {
max <- metricValue
data.model <- data.training.model[[method]]
data.prediction <- data.training.prediction[[method]]
data.confusionMatrix <- data.training.confusionMatrix[[method]]
data.params <- dfParams[row,]
}
}
# Get MySQL connection param from env variables
#print('############### Get MySQL connection param from env variables');
data.env <-read.csv('env', header=TRUE, sep = ",", dec = ",")
connection <- dbConnect(
MySQL(),
user=toString(data.env$dbUser),
password=toString(data.env$dbpassword),
host=toString(data.env$dbHost),
dbname=toString(data.env$dbName)
)
# Catch collection token from script params
args <- commandArgs(trailingOnly = TRUE)
#token <- args[1]
token <- "GwusblYw7D62uZ3shn8SUWgcz"
# Querying data from MySQL
#print('############### Querying data from MySQL');
# FIX RELATION QUERY
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as id, token, file_path, cast(ml_model_prediction_id as CHAR(25)) as ml_model_prediction_id FROM ml_model_predictions WHERE token = '%s'", token))
# Querying data from MySQL
#print('############### Querying data from MySQL');
# FIX RELATION QUERY
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as id, token, file_path, cast(ml_model_id as CHAR(25)) as ml_model_id FROM ml_model_predictions WHERE token = '%s'", token))
data.state <- dbGetQuery(connection, sprintf("SELECT token FROM ml_model_states WHERE is_current=1 and ml_model_id = '%s'", data.query$ml_model_id))
# Retrieving data for model analysis
dir <- paste(data.env$dataDir,"/",data.env$sftpUser, sep="")
data.raw <- read.csv(file.path(dir, data.query$file_path), header=TRUE, sep = ";", dec = ",")
filename <- file.path(sprintf("%s/models",dir),sprintf("%s.rda", data.state$token))
data.model <- readRDS(filename)
data.prediction <- predict(data.model, data.raw)
data.prediction <- as.data.frame(data.prediction)
colnames(data.prediction) <- c('prediction')
data.prediction$sample <- data.raw$sample
data.prediction$ml_model_prediction_data_id <- as.integer(data.query$id)
