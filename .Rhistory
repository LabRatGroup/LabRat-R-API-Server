#Create model
#print('############### Creating model');
set.seed(123)
data.in_train <- createDataPartition(data.raw$prediction, p = 0.67, list = FALSE)
data.training <- data.raw[data.in_train, ]
data.test <- data.raw[-data.in_train, ]
dfParams <- as.data.frame(fromJSON(data.query$params))
data.training.model <- list()
data.training.prediction <- list()
data.training.confusionMatrix <- list()
max = 0
index <- 1
for (row in 1:nrow(dfParams)) {
method <- dfParams[row, "method"]
metric <- dfParams[row, "metric"]
preprocessing <- dfParams[row, "preprocessing"]
positive <- dfParams[row, "positive"]
trainControlMethod <- dfParams[row, "control"]$trainControlMethod
trainControlMethodRounds <- dfParams[row, "control"]$trainControlMethodRounds
ctrl <- trainControl(
method = trainControlMethod,
number = as.numeric(trainControlMethodRounds)
)
source(file.path("./scripts/grid/", sprintf("%s.R", method)))
data.training.model[[method]] <- train(
prediction ~ .,
data = data.training,
method = method,
preProcess = c(preprocessing),
trControl = ctrl,
tuneGrid = grid,
metric = metric
)
data.training.prediction[[method]] <- predict(data.training.model[[method]], data.test)
data.training.confusionMatrix[[method]] <- confusionMatrix(data.training.prediction[[method]],  data.test$prediction, positive = positive)
metricValue <- data.training.confusionMatrix[[method]]$overall[[metric]]
if(metricValue >= max) {
max <- metricValue
data.model <- data.training.model[[method]]
data.prediction <- data.training.prediction[[method]]
data.confusionMatrix <- data.training.confusionMatrix[[method]]
data.params <- dfParams[row,]
}
index <- index+1
}
#data.params
View(data.params)
View(data.params)
data.params$method
data.algorithm <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as id FROM ml_algorithms WHERE alias = '%s'", data.params$method))
View(data.algorithm)
index
if(index > 1){
updateSQL_1 <- "UPDATE ml_model_state set (ml_algorithm_id, params) VALUES "
updateSQL_2 <- sprintf("(%s, %s)", data.algorithm$id, toJSON(data.params))
updateSQL_3 <- sprintf(" WHERE id = %s", data.query$id )
updateSQL <- paste0(updateSQL_1, updateSQL_2, updateSQL_3, seq="")
dbExecute(connection, updateSQL)
}
updateSQL
if(index > 1){
updateSQL_1 <- "UPDATE ml_model_state set (ml_algorithm_id, params) VALUES "
updateSQL_2 <- sprintf("(%s, '%s')", data.algorithm$id, toJSON(data.params))
updateSQL_3 <- sprintf(" WHERE id = %s", data.query$id )
updateSQL <- paste0(updateSQL_1, updateSQL_2, updateSQL_3, seq="")
dbExecute(connection, updateSQL)
}
updateSQL
if(index > 1){
updateSQL_1 <- "UPDATE ml_model_states set (ml_algorithm_id, params) VALUES "
updateSQL_2 <- sprintf("(%s, '%s')", data.algorithm$id, toJSON(data.params))
updateSQL_3 <- sprintf(" WHERE id = %s", data.query$id )
updateSQL <- paste0(updateSQL_1, updateSQL_2, updateSQL_3, seq="")
dbExecute(connection, updateSQL)
}
updateSQL
if(index > 1){
updateSQL <- sprintf("UPDATE ml_model_states set ml_algorithm_id = %s, params = '%s' ", data.algorithm$id, toJSON(data.params))
dbExecute(connection, updateSQL)
}
# Get MySQL connection param from env variables
#print('############### Get MySQL connection param from env variables');
data.env <-read.csv('env', header=TRUE, sep = ",", dec = ",")
connection <- dbConnect(
MySQL(),
user=toString(data.env$dbUser),
password=toString(data.env$dbpassword),
host=toString(data.env$dbHost),
dbname=toString(data.env$dbName)
)
# Catch collection token from script params
args <- commandArgs(trailingOnly = TRUE)
#token <- args[1]
token <- "WJTgYBzbYc64ZI5uVySI8t8dA"
# Querying data from MySQL
#print('############### Querying data from MySQL');
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as id, token, params, file_path, cast(ml_model_id as CHAR(25)) as ml_model_id FROM ml_model_states WHERE token = '%s'", token))
# Retrieving data for model analysis
data.params <- fromJSON(data.query$params)
dir <- paste(data.env$dataDir,"/",data.env$sftpUser, sep="")
data.raw <- read.csv(file.path(dir, data.query$file_path), header=TRUE, sep = ";", dec = ",")
#Create model
#print('############### Creating model');
set.seed(123)
data.in_train <- createDataPartition(data.raw$prediction, p = 0.67, list = FALSE)
data.training <- data.raw[data.in_train, ]
data.test <- data.raw[-data.in_train, ]
dfParams <- as.data.frame(fromJSON(data.query$params))
data.training.model <- list()
data.training.prediction <- list()
data.training.confusionMatrix <- list()
max = 0
index <- 1
for (row in 1:nrow(dfParams)) {
tryCatch(
{
method <- dfParams[row, "method"]
metric <- dfParams[row, "metric"]
preprocessing <- dfParams[row, "preprocessing"]
positive <- dfParams[row, "positive"]
trainControlMethod <- dfParams[row, "control"]$trainControlMethod
trainControlMethodRounds <- dfParams[row, "control"]$trainControlMethodRounds
ctrl <- trainControl(
method = trainControlMethod,
number = as.numeric(trainControlMethodRounds)
)
source(file.path("./scripts/grid/", sprintf("%s.R", method)))
data.training.model[[method]] <- train(
prediction ~ .,
data = data.training,
method = method,
preProcess = c(preprocessing),
trControl = ctrl,
tuneGrid = grid,
metric = metric
)
data.training.prediction[[method]] <- predict(data.training.model[[method]], data.test)
data.training.confusionMatrix[[method]] <- confusionMatrix(data.training.prediction[[method]],  data.test$prediction, positive = positive)
metricValue <- data.training.confusionMatrix[[method]]$overall[[metric]]
if(metricValue >= max) {
max <- metricValue
data.model <- data.training.model[[method]]
data.prediction <- data.training.prediction[[method]]
data.confusionMatrix <- data.training.confusionMatrix[[method]]
data.params <- dfParams[row,]
}
}
)
index <- index+1
}
#data.params
dfParams
for (row in 1:nrow(dfParams)) {
tryCatch(
{
method <- dfParams[row, "method"]
metric <- dfParams[row, "metric"]
preprocessing <- dfParams[row, "preprocessing"]
positive <- dfParams[row, "positive"]
trainControlMethod <- dfParams[row, "control"]$trainControlMethod
trainControlMethodRounds <- dfParams[row, "control"]$trainControlMethodRounds
ctrl <- trainControl(
method = trainControlMethod,
number = as.numeric(trainControlMethodRounds)
)
source(file.path("./scripts/grid/", sprintf("%s.R", method)))
data.training.model[[method]] <- train(
prediction ~ .,
data = data.training,
method = method,
preProcess = c(preprocessing),
trControl = ctrl,
tuneGrid = grid,
metric = metric
)
data.training.prediction[[method]] <- predict(data.training.model[[method]], data.test)
data.training.confusionMatrix[[method]] <- confusionMatrix(data.training.prediction[[method]],  data.test$prediction, positive = positive)
metricValue <- data.training.confusionMatrix[[method]]$overall[[metric]]
if(metricValue >= max) {
max <- metricValue
data.model <- data.training.model[[method]]
data.prediction <- data.training.prediction[[method]]
data.confusionMatrix <- data.training.confusionMatrix[[method]]
data.params <- dfParams[row,]
}
}
)
index <- index+1
}
for (row in 1:nrow(dfParams)) {
method <- dfParams[row, "method"]
metric <- dfParams[row, "metric"]
preprocessing <- dfParams[row, "preprocessing"]
positive <- dfParams[row, "positive"]
trainControlMethod <- dfParams[row, "control"]$trainControlMethod
trainControlMethodRounds <- dfParams[row, "control"]$trainControlMethodRounds
ctrl <- trainControl(
method = trainControlMethod,
number = as.numeric(trainControlMethodRounds)
)
source(file.path("./scripts/grid/", sprintf("%s.R", method)))
tryCatch(
{
data.training.model[[method]] <- train(
prediction ~ .,
data = data.training,
method = method,
preProcess = c(preprocessing),
trControl = ctrl,
tuneGrid = grid,
metric = metric
)
data.training.prediction[[method]] <- predict(data.training.model[[method]], data.test)
data.training.confusionMatrix[[method]] <- confusionMatrix(data.training.prediction[[method]],  data.test$prediction, positive = positive)
metricValue <- data.training.confusionMatrix[[method]]$overall[[metric]]
if(metricValue >= max) {
max <- metricValue
data.model <- data.training.model[[method]]
data.prediction <- data.training.prediction[[method]]
data.confusionMatrix <- data.training.confusionMatrix[[method]]
data.params <- dfParams[row,]
}
}
)
index <- index+1
}
dfParams <- as.data.frame(fromJSON(data.query$params))
# Get MySQL connection param from env variables
#print('############### Get MySQL connection param from env variables');
data.env <-read.csv('env', header=TRUE, sep = ",", dec = ",")
connection <- dbConnect(
MySQL(),
user=toString(data.env$dbUser),
password=toString(data.env$dbpassword),
host=toString(data.env$dbHost),
dbname=toString(data.env$dbName)
)
# Catch collection token from script params
args <- commandArgs(trailingOnly = TRUE)
#token <- args[1]
token <- "yHdlAq05IqeLIcrdpIMrVTyov"
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as id, token, params, file_path, cast(ml_model_id as CHAR(25)) as ml_model_id FROM ml_model_states WHERE token = '%s'", token))
# Retrieving data for model analysis
data.params <- fromJSON(data.query$params)
dir <- paste(data.env$dataDir,"/",data.env$sftpUser, sep="")
data.raw <- read.csv(file.path(dir, data.query$file_path), header=TRUE, sep = ";", dec = ",")
set.seed(123)
data.in_train <- createDataPartition(data.raw$prediction, p = 0.67, list = FALSE)
data.training <- data.raw[data.in_train, ]
data.test <- data.raw[-data.in_train, ]
dfParams <- as.data.frame(fromJSON(data.query$params))
data.training.model <- list()
data.training.prediction <- list()
data.training.confusionMatrix <- list()
max = 0
index <- 1
for (row in 1:nrow(dfParams)) {
tryCatch(
{
method <- dfParams[row, "method"]
metric <- dfParams[row, "metric"]
preprocessing <- dfParams[row, "preprocessing"]
positive <- dfParams[row, "positive"]
trainControlMethod <- dfParams[row, "control"]$trainControlMethod
trainControlMethodRounds <- dfParams[row, "control"]$trainControlMethodRounds
ctrl <- trainControl(
method = trainControlMethod,
number = as.numeric(trainControlMethodRounds)
)
source(file.path("./scripts/grid/", sprintf("%s.R", method)))
data.training.model[[method]] <- train(
prediction ~ .,
data = data.training,
method = method,
preProcess = c(preprocessing),
trControl = ctrl,
tuneGrid = grid,
metric = metric
)
data.training.prediction[[method]] <- predict(data.training.model[[method]], data.test)
data.training.confusionMatrix[[method]] <- confusionMatrix(data.training.prediction[[method]],  data.test$prediction, positive = positive)
metricValue <- data.training.confusionMatrix[[method]]$overall[[metric]]
if(metricValue >= max) {
max <- metricValue
data.model <- data.training.model[[method]]
data.prediction <- data.training.prediction[[method]]
data.confusionMatrix <- data.training.confusionMatrix[[method]]
data.params <- dfParams[row,]
}
}
)
index <- index+1
}
index
index <- 1
for (row in 1:nrow(dfParams)) {
tryCatch(
{
method <- dfParams[row, "method"]
metric <- dfParams[row, "metric"]
preprocessing <- dfParams[row, "preprocessing"]
positive <- dfParams[row, "positive"]
trainControlMethod <- dfParams[row, "control"]$trainControlMethod
trainControlMethodRounds <- dfParams[row, "control"]$trainControlMethodRounds
ctrl <- trainControl(
method = trainControlMethod,
number = as.numeric(trainControlMethodRounds)
)
source(file.path("./scripts/grid/", sprintf("%s.R", method)))
data.training.model[[method]] <- train(
prediction ~ .,
data = data.training,
method = method,
preProcess = c(preprocessing),
trControl = ctrl,
tuneGrid = grid,
metric = metric
)
data.training.prediction[[method]] <- predict(data.training.model[[method]], data.test)
data.training.confusionMatrix[[method]] <- confusionMatrix(data.training.prediction[[method]],  data.test$prediction, positive = positive)
metricValue <- data.training.confusionMatrix[[method]]$overall[[metric]]
if(metricValue >= max) {
max <- metricValue
data.model <- data.training.model[[method]]
data.prediction <- data.training.prediction[[method]]
data.confusionMatrix <- data.training.confusionMatrix[[method]]
data.params <- dfParams[row,]
}
}, error = function(err) {
cat(500)
}, finnaly = {
cat(200)
}
)
index <- index+1
}
index
# Get MySQL connection param from env variables
#print('############### Get MySQL connection param from env variables');
data.env <-read.csv('env', header=TRUE, sep = ",", dec = ",")
connection <- dbConnect(
MySQL(),
user=toString(data.env$dbUser),
password=toString(data.env$dbpassword),
host=toString(data.env$dbHost),
dbname=toString(data.env$dbName)
)
# Catch collection token from script params
args <- commandArgs(trailingOnly = TRUE)
#token <- args[1]
token <- "qugHFbNdjHv9k20N3SFE3FIjZ"
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as id, token, params, file_path, cast(ml_model_id as CHAR(25)) as ml_model_id FROM ml_model_states WHERE token = '%s'", token))
# Retrieving data for model analysis
data.params <- fromJSON(data.query$params)
dir <- paste(data.env$dataDir,"/",data.env$sftpUser, sep="")
data.raw <- read.csv(file.path(dir, data.query$file_path), header=TRUE, sep = ";", dec = ",")
set.seed(123)
data.in_train <- createDataPartition(data.raw$prediction, p = 0.67, list = FALSE)
data.training <- data.raw[data.in_train, ]
data.test <- data.raw[-data.in_train, ]
dfParams <- as.data.frame(fromJSON(data.query$params))
data.training.model <- list()
data.training.prediction <- list()
data.training.confusionMatrix <- list()
max = 0
index <- 1
for (row in 1:nrow(dfParams)) {
tryCatch(
{
method <- dfParams[row, "method"]
metric <- dfParams[row, "metric"]
preprocessing <- dfParams[row, "preprocessing"]
positive <- dfParams[row, "positive"]
trainControlMethod <- dfParams[row, "control"]$trainControlMethod
trainControlMethodRounds <- dfParams[row, "control"]$trainControlMethodRounds
ctrl <- trainControl(
method = trainControlMethod,
number = as.numeric(trainControlMethodRounds)
)
source(file.path("./scripts/grid/", sprintf("%s.R", method)))
data.training.model[[method]] <- train(
prediction ~ .,
data = data.training,
method = method,
preProcess = c(preprocessing),
trControl = ctrl,
tuneGrid = grid,
metric = metric
)
data.training.prediction[[method]] <- predict(data.training.model[[method]], data.test)
data.training.confusionMatrix[[method]] <- confusionMatrix(data.training.prediction[[method]],  data.test$prediction, positive = positive)
metricValue <- data.training.confusionMatrix[[method]]$overall[[metric]]
if(metricValue >= max) {
max <- metricValue
data.model <- data.training.model[[method]]
data.prediction <- data.training.prediction[[method]]
data.confusionMatrix <- data.training.confusionMatrix[[method]]
data.params <- dfParams[row,]
}
}
)
index <- index+1
}
index <- 1
for (row in 1:nrow(dfParams)) {
tryCatch(
{
method <- dfParams[row, "method"]
metric <- dfParams[row, "metric"]
preprocessing <- dfParams[row, "preprocessing"]
positive <- dfParams[row, "positive"]
trainControlMethod <- dfParams[row, "control"]$trainControlMethod
trainControlMethodRounds <- dfParams[row, "control"]$trainControlMethodRounds
ctrl <- trainControl(
method = trainControlMethod,
number = as.numeric(trainControlMethodRounds)
)
source(file.path("./scripts/grid/", sprintf("%s.R", method)))
data.training.model[[method]] <- train(
prediction ~ .,
data = data.training,
method = method,
preProcess = c(preprocessing),
trControl = ctrl,
tuneGrid = grid,
metric = metric
)
data.training.prediction[[method]] <- predict(data.training.model[[method]], data.test)
data.training.confusionMatrix[[method]] <- confusionMatrix(data.training.prediction[[method]],  data.test$prediction, positive = positive)
metricValue <- data.training.confusionMatrix[[method]]$overall[[metric]]
if(metricValue >= max) {
max <- metricValue
data.model <- data.training.model[[method]]
data.prediction <- data.training.prediction[[method]]
data.confusionMatrix <- data.training.confusionMatrix[[method]]
data.params <- dfParams[row,]
}
}, error = function(err) {
cat(500)
}, finnaly = {
cat(200)
}
)
index <- index+1
}
index
data.params
dfParams
lapply( dbListConnections( dbDriver( drv = "MySQL")), dbDisconnect)
# Get MySQL connection param from env variables
#print('############### Get MySQL connection param from env variables');
data.env <-read.csv('env', header=TRUE, sep = ",", dec = ",")
connection <- dbConnect(
MySQL(),
user=toString(data.env$dbUser),
password=toString(data.env$dbpassword),
host=toString(data.env$dbHost),
dbname=toString(data.env$dbName)
)
# Catch collection token from script params
args <- commandArgs(trailingOnly = TRUE)
#token <- args[1]
token <- "NiLmOMFDyxVaz7yelPdNkorhp"
# Querying data from MySQL
#print('############### Querying data from MySQL');
# FIX RELATION QUERY
data.query <- dbGetQuery(connection, sprintf("SELECT cast(id as CHAR(25)) as id, token, file_path, cast(ml_model_id as CHAR(25)) as ml_model_id FROM ml_model_predictions WHERE token = '%s'", token))
data.state <- dbGetQuery(connection, sprintf("SELECT token FROM ml_model_states WHERE is_current=1 and ml_model_id = '%s'", data.query$ml_model_id))
# Retrieving data for model analysis
dir <- paste(data.env$dataDir,"/",data.env$sftpUser, sep="")
data.raw <- read.csv(file.path(dir, data.query$file_path), header=TRUE, sep = ";", dec = ",")
#Predict
#print('############### Predincting data');
filename <- file.path(sprintf("%s/models",dir),sprintf("%s.rda", data.state$token))
data.model <- readRDS(filename)
data.prediction <- predict(data.model, data.raw)
data.prediction <- as.data.frame(data.prediction)
colnames(data.prediction) <- c('prediction')
data.prediction$sample <- data.raw$sample
data.prediction$ml_model_prediction_data_id <- as.integer(data.query$id)
#str(data.prediction$ml_model_prediction_data_id)
mongoCon <- mongo(collection = "ml_model_prediction_score", db = "labrat")
mongoCon$remove(sprintf('{"ml_model_prediction_data_id" : "%s"}'), data.ml_model_prediction_data_id)
data()
data
data.prediction$ml_model_prediction_data_id
data.query$id
mongoCon <- mongo(collection = "ml_model_prediction_score", db = "labrat")
mongoCon$remove(sprintf('{"ml_model_prediction_data_id" : "%s"}'), data.query$id)
mongoCon$remove(sprintf('{"ml_model_prediction_data_id" : "%s"}', data.query$id))
mongoCon$remove(sprintf('{"ml_model_prediction_data_id" : "%s"}', 5))
mongoCon$remove(sprintf('{"ml_model_prediction_data_id" : "%s"}', 5))
mongoCon$remove(sprintf('{"ml_model_prediction_score" : {ml_model_prediction_data_id" : "%s"}}', 5))
mongoCon$remove(sprintf('{"ml_model_prediction_score" : {$ml_model_prediction_data_id" : "%s"}}', 5))
mongoCon$remove(sprintf('{"ml_model_prediction_score" : {"$ml_model_prediction_data_id" : "%s"}}', 5))
mongoCon.remove('{"ml_model_prediction_score" : {"$ml_model_prediction_data_id" : 5}}')
mongoCon.remove('{"ml_model_prediction_data_id" : 5}')
mongoCon.remove('{"ml_model_prediction_data_id" : "5"}')
mongoCon <- mongo(collection = "ml_model_prediction_score", db = "labrat")
mongoCon.remove('{"ml_model_prediction_data_id" : "5"}')
mongoCon$remove('{"ml_model_prediction_data_id" : "5"}')
mongoCon$remove('{"ml_model_prediction_score" : {"ml_model_prediction_data_id" : 5}}')
mongoCon$remove('{"ml_model_prediction_score" : {"$ml_model_prediction_data_id" : 5}}')
mongoCon$remove('{"$ml_model_prediction_data_id" : 5}')
mongoCon$remove('{"ml_model_prediction_data_id" : 5}')
mongoCon$count()
mongoCon$remove('{"ml_model_prediction_data_id" : 5}')
mongoCon$count()
mongoCon <- mongo(collection = "ml_model_prediction_score", db = "labrat")
mongoCon$remove(sprintf('{"ml_model_prediction_data_id" : %s}', data.query.id))
mongoCon$remove(sprintf('{"ml_model_prediction_data_id" : %s}', data.query$id))
mongoCon$count()
